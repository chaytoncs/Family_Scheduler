using FamilyScheduler.Areas.Identity.Data;
using FamilyScheduler.Models.DTO;
using FamilyScheduler.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using FamilyScheduler.Data;
using System.Collections.Generic;
using System.Linq.Expressions;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace FamilyScheduler.Controllers
{
    /// <summary>
    /// The Schedule Controller is used to display the assigments generated by a Schedule and to Create a new Schedule.
    /// </summary>
    [Route("Schedule")]
    [Authorize]
    public class ScheduleController : Controller
    {
        private readonly FamilySchedulerContext _context;
        private readonly UserManager<ApplicationUser> _userManager;

        // Constructor
        public ScheduleController(FamilySchedulerContext context, UserManager<ApplicationUser> userManager)
        {
            _context = context;
            _userManager = userManager;
        }

        /// <summary>
        /// The List action is used to display the Schedule List view, which contains the assignments generated by the Scheduler or Admin, sorted by Due Today or Later this week.
        /// </summary>
        /// <returns>The List view for Schedule along with a list of AssignmentDTOs.</returns>
        [Route("List")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> List()
        {
            // Currently I have no way to determine assignments specific to a schedule, so I will just display all assignments
            // Query Entities and related data
            var assignments = await _context.Assignments.Include(a => a.Task)
                .Include(a => a.User)
                .Include(a => a.Task.Workload)
                .Include(a => a.Task.Frequency)
                .Include(a => a.Task.TaskType).OrderBy(a => a.DueDate).ToListAsync();

            // Transform assignments into a List of Assignment DTOs to be returned to the view
            List<AssignmentDTO> assigmentDTOs = new();

            foreach (Assignment a in assignments)
            {
                AssignmentDTO assignmentDTO = new()
                {
                    AssignmentID = a.AssignmentID,
                    TaskID = a.TaskID,
                    UserID = a.UserID,
                    DueDate = a.DueDate,
                    Completed = a.Completed,
                    TaskDescription = a.Task.Description,
                    WorkloadDescription = a.Task.Workload.Description,
                    FrequencyDescription = a.Task.Frequency.Description,
                    TaskTypeDescription = a.Task.TaskType.Description,
                    FullName = $"{a.User.FirstName} {a.User.LastName}"
                };
                assigmentDTOs.Add(assignmentDTO);
            }
            return View(assigmentDTOs);
        }

        /// <summary>
        /// Create (GET) action displays the create form view that is used to generate a new schedule.
        /// </summary>
        /// <returns>The Create View for Schedule.</returns>
        [Route("Create")]
        [Authorize(Roles = "Admin")]
        public ActionResult Create()
        {
            // Validation to Ensure there are at least 1 user and 1 task before running a schedule
            int memberCount = _userManager.GetUsersInRoleAsync("Member").Result.Count();
            if (memberCount == 0)
            {
                TempData["ErrorMessage"] = "Error: You must have Household Members before running a schedule.";
                return RedirectToAction(nameof(List));
            }

            if(!_context.Tasks.Any())
            {
                TempData["ErrorMessage"] = "Error: You must have Tasks before runnning a schedule.";
                return RedirectToAction(nameof(List));
            }
            return View("Create");
        }

        /// <summary>
        /// Create (POST) action generates a new assignment schedule based on the user input bound to the Schedule Model.
        /// </summary>
        /// <param name="schedule">Schedule model that contains the user bound data from Create (GET) Form</param>
        /// <returns>Returns the List view for Schedule if Model State is Valid, else the Create (GET) View with Model State Errors.</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Route("Create")]
        public async Task<IActionResult> Create([Bind("StartDate,MaxAssignments")] Schedule schedule)
        {
            if (!ModelState.IsValid)
            {
                return View(schedule);
            }

            // Filters out any Users that are not Members (We only want to assign tasks to Members)
            List<int> userIDs = new List<int>();
            var members = _userManager.GetUsersInRoleAsync("Member").Result;
            foreach(var user in members)
            {
                User member = await _context.Users.Where(u => u.UserID == user.UserAccountID).FirstAsync();
                if(member != null)
                {
                    userIDs.Add(member.UserID);
                }
            }

            // Verify there are Users
            if (userIDs == null || userIDs.Count < 1)
            {
                TempData["ErrorMessage"] = "Error: You must have Household Members before running a schedule.";
                return RedirectToAction(nameof(List));
            }

            List<FamilyScheduler.Models.Task> tasks = await _context.Tasks.Include(t => t.Workload).Include(t => t.Frequency).ToListAsync();
            // Verify there are tasks
            if (tasks == null)
            {
                TempData["ErrorMessage"] = "Error: You must have Tasks before runnning a schedule.";
                return RedirectToAction(nameof(List));
            }

            // Remove all of the current assignments
            var currentAssignments = await _context.Assignments.ToListAsync();
            _context.Assignments.RemoveRange(currentAssignments);

            // Generate new Assignments for the new Schedule
            List<(int, int, int)> triples = new List<(int, int, int)>();

            foreach(var t in tasks)
            {
                triples.Add((t.TaskID, t.Frequency.Value, t.Workload.Value));
            }

            List<Assignment> newSchedule = TaskSchedulerLibrary.TaskScheduler.ScheduleWeek(schedule.StartDate, userIDs, triples, schedule.MaxAssignments);
            _context.Assignments.AddRange(newSchedule);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(List));
        }
    }
}
